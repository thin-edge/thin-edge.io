#!/bin/sh

### BEGIN INIT INFO
# Provides:
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start thin-edge daeemon at boot time
# Description:       Enable thin-edge services.
### END INIT INFO

# Provide working directory of your service.
dir="/usr/bin"

# Command to start the process, including arguments if required.
cmd="/usr/bin/tedge"

# User to execute the command (if left empty will execute as root)
user="tedge"

name=$(basename $0)
pid_file="/var/run/$name.pid"

# Default location for logging assumed to be /var/log.
stdout_log="/var/log/$name.log"
stderr_log="/var/log/$name.err"

get_pid() {
    cat "$pid_file"
}

is_running() {
    [ -f "$pid_file" ] && ps -p "$(get_pid)" > /dev/null 2>&1
}

start() {
    if is_running; then
            echo "$name is already running"
    else
        echo "Starting $name"
        cd "$dir" || return
        if [ -z "$user" ]; then
            sudo $cmd >> "$stdout_log" 2>> "$stderr_log" &
        else
            sudo -u "$user" $cmd >> "$stdout_log" 2>> "$stderr_log" &
        fi
        echo $! > "$pid_file"
        if ! is_running; then
            echo "Unable to start thin-edge, see $stdout_log and $stderr_log"
            exit 1
        fi
    fi
}

stop() {
    if is_running; then
        echo -n "Stopping $name.."
        kill "$(get_pid)"
        for i in 1 2 3 4 5 6 7 8 9 10
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "Stopped"
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
        fi
    else
        echo "Not running"
    fi
}

restart() {
    stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    start
}

status() {
    if is_running; then
        echo "Running"
    else
        echo "Stopped"
        exit 1
    fi
}


# Add options for our script, by default we provide: start, stop, status, restart
case "$1" in

    # start subcommand, starts the script if not already started.
    start)
        start
        ;;

    # stop the service, it will try to stop the service for up to 10 seconds or otherwise exit with code 1
    stop)
        stop
        ;;

    restart)
        restart
        ;;

    status)
        status
        ;;

    *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0
