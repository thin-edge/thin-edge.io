name: Pull Request Checks

on:
  workflow_dispatch:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  block-fixup:
    name: Block fixup commits
    runs-on: Ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Block Fixup Commit Merge
        # https://github.com/13rac1/block-fixup-merge-action
        uses: 13rac1/block-fixup-merge-action@v2.0.0

  # JOB to run change detection
  changes:
    name: Filter changes
    runs-on: Ubuntu-20.04
    # Set job outputs to values from filter step
    outputs:
      docs: ${{ steps.filter.outputs.docs }}
      rust: ${{ steps.filter.outputs.rust }}
      workflows: ${{ steps.filter.outputs.workflows }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        # https://github.com/dorny/paths-filter
        id: filter
        with:
          filters: |
            docs:
              - 'docs/**'
            rust:
              - 'crates/**'
              - 'plugins/**'
              - 'Cargo.*'
            workflows:
              - '.github/workflows/**'

  #
  # Checking that Cargo.lock is up to date
  #
  check-lockfile-uptodate:
    name: Check whether Cargo.lock is up to date
    runs-on: ubuntu-20.04
    outputs:
      locks: ${{ steps.filter.outputs.locks }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.64.0
        with:
          targets: armv7-unknown-linux-gnueabihf

      - uses: Swatinem/rust-cache@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            locks:
              - '**/Cargo.toml'

      - name: Check whether lockfile is up to date
        if: steps.filter.outputs.locks == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked

  udeps:
    name: Check for unused dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Run cargo-udeps
        uses: aig787/cargo-udeps-action@v1
        with:
          version: 'latest'
          args: '--all-features'

  mdbook-build-check:
    name: Run mdbook build
    runs-on: ubuntu-20.04
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' || needs.changes.outputs.workflows == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        # https://github.com/marketplace/actions/mdbook-action
        with:
          mdbook-version: "0.4.18"
          #mdbook-version: 'latest'

      - name: Install mdbook-mermaid
        uses: actions-rs/install@v0.1
        # https://github.com/marketplace/actions/rust-cargo-install
        with:
          crate: mdbook-mermaid
          version: latest

      - name: Install mdbook-linkcheck
        uses: actions-rs/install@v0.1
        # https://github.com/marketplace/actions/rust-cargo-install
        with:
          crate: mdbook-linkcheck
          version: latest

      - name: Install mdbook-admonish
        uses: actions-rs/install@v0.1
        with:
          crate: mdbook-admonish
          version: latest

      - name: Run mdbook build
        run: |
          ls -l
          cd docs
          mdbook build

  cargo-sort:
    name: Run cargo sort
    runs-on: Ubuntu-20.04
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Install cargo sort 
        uses: actions-rs/install@v0.1
        # https://github.com/marketplace/actions/rust-cargo-install
        with:
          crate: cargo-sort 
          version: latest

      - name: Cargo sort
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          command: sort
          args: -w . --check

  cargo-fmt:
    name: Run cargo fmt
    runs-on: Ubuntu-20.04
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      # Nightly toolchain is needed for cargo fmt since issue: https://github.com/thin-edge/thin-edge.io/issues/1660
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
          override: true

      - name: Cargo fmt --version
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          command: fmt
          args: --version

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          command: fmt
          args: -- --check

  cargo-clippy:
    name: Run cargo clippy
    runs-on: Ubuntu-20.04
    env:
      RUSTFLAGS: -D warnings
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: enable toolchain via github action
        uses: dtolnay/rust-toolchain@1.64.0
        with:
          components: rustfmt, clippy

      - name: Enable cache
        # https://github.com/marketplace/actions/rust-cache
        uses: Swatinem/rust-cache@v2

      - name: Cargo clippy --version
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          toolchain: 1.64.0
          command: clippy
          args: --version

      - name: Cargo clippy
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          toolchain: 1.64.0
          command: clippy
          args: --all-features

  cargo-audit:
    name: Run cargo audit
    runs-on: Ubuntu-20.04
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cargo audit
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          command: audit

  cargo-test:
    name: Run cargo test
    runs-on: Ubuntu-20.04
    env:
      RUSTFLAGS: -D warnings
    needs: [cargo-fmt, cargo-clippy]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: enable toolchain via github action
        uses: dtolnay/rust-toolchain@1.64.0

      - name: Enable cache
        # https://github.com/marketplace/actions/rust-cache
        uses: Swatinem/rust-cache@v2

      - name: Cargo version
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          command: version

      - name: Cargo build dummy plugin
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          command: build
          args: -p tedge-dummy-plugin

      - name: Cargo test
        uses: actions-rs/cargo@v1
        # https://github.com/marketplace/actions/rust-cargo
        with:
          command: test
          args: --no-fail-fast --all-features

  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master

  typos:
    name: Spell Check with Typos
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: crate-ci/typos@v1.13.10
      continue-on-error: true
    - run: exit 0

### Disable cargo-tarpaulin as some tests failed only in this step
#  cargo-tarpaulin:
#    name: Run cargo tarpaulin
#    runs-on: Ubuntu-20.04
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Install rust v1.64.0
#        uses: dtolnay/rust-toolchain@1.64.0
#
#      - name: Enable cache
#        # https://github.com/marketplace/actions/rust-cache
#        uses: Swatinem/rust-cache@v2
#
#      - name: install libssl
#        run: sudo apt install libssl-dev
#
#      - name: Cargo install tarpaulin
#        uses: actions-rs/cargo@v1
#        # https://github.com/marketplace/actions/rust-cargo
#        with:
#          command: install
#          args: cargo-tarpaulin
#
#      - name: Cargo tarpaulin
#        uses: actions-rs/cargo@v1
#        # https://github.com/marketplace/actions/rust-cargo
#        with:
#          command: tarpaulin
#          args: --skip-clean --avoid-cfg-tarpaulin -v --out Xml
#
#      - name: Upload to codecov.io
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{secrets.CODECOV_TOKEN}}
